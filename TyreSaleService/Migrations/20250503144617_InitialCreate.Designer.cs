// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TyreSaleService.Data;

#nullable disable

namespace TyreSaleService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503144617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("TyreSaleService.Models.Tyre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<bool>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("LoadIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeedIndex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Tyres");
                });

            modelBuilder.Entity("TyreSaleService.Models.TyreCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TyreCompanies");
                });

            modelBuilder.Entity("TyreSaleService.Models.TyreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TyreModels");
                });

            modelBuilder.Entity("TyreSaleService.Models.Tyre", b =>
                {
                    b.HasOne("TyreSaleService.Models.TyreModel", "Model")
                        .WithMany("Tyres")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TyreSaleService.Models.TyreDimensions", "Dimensions", b1 =>
                        {
                            b1.Property<int>("TyreId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Profile")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("RimSize")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TyreId");

                            b1.ToTable("Tyres");

                            b1.WithOwner()
                                .HasForeignKey("TyreId");
                        });

                    b.Navigation("Dimensions")
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("TyreSaleService.Models.TyreModel", b =>
                {
                    b.HasOne("TyreSaleService.Models.TyreCompany", "Company")
                        .WithMany("Models")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TyreSaleService.Models.TyreCompany", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("TyreSaleService.Models.TyreModel", b =>
                {
                    b.Navigation("Tyres");
                });
#pragma warning restore 612, 618
        }
    }
}
